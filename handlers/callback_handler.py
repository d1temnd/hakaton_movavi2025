from telebot import types
from telebot.types import *
from data.User import User
from data.database import SessionLocal
from keyboards.main_menu import main_menu_keyboard
from keyboards.role_inline import role_inline_keyboard
from utils import generate_invite_token, is_admin, load_work_docs

def handle_inline_button(bot, call):
    db = SessionLocal()
    user_id = call.from_user.id

    if call.data == "documentation":
        user = db.query(User).filter(User.telegram_id == user_id).first()
        docs = load_work_docs()

        if is_admin(user_id):
            send_menu(bot, call.message.chat.id, docs, "", call.message.message_id)
        elif user:
            role_docs = docs.get(user.role, {})
            send_menu(bot, call.message.chat.id, role_docs, "", call.message.message_id)
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                reply_markup=main_menu_keyboard(user_id)
            )
            db.close()
            return

    elif call.data.startswith("menu_"):
        path = call.data[5:]  # –£–±–∏—Ä–∞–µ–º "menu_" –∏–∑ callback data

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        if path == "root":
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard(user_id)
            )
            db.close()
            return

        docs = load_work_docs()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_admin(user_id):
            menu = docs
        else:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            menu = docs.get(user.role, {})

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—É—Ç–∏
        try:
            for key in path.split("/"):
                if key:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏
                    menu = menu[key]
        except KeyError:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_menu_keyboard(user_id)
            )
            db.close()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        send_menu(bot, call.message.chat.id, menu, path, call.message.message_id)




    elif call.data.startswith("role_"):
        role = call.data.split("_")[1].strip().lower()
        token = generate_invite_token(call.from_user.id, db, role)
        bot_username = bot.get_me().username
        invite_link = f"https://t.me/{bot_username}?start={token}"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ–ª–∏ '{role}': {invite_link}",
            reply_markup=main_menu_keyboard(user_id)
        )

    db.close()


def send_menu(bot, chat_id, menu, path="", message_id=None):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ message_id –Ω–µ —É–∫–∞–∑–∞–Ω.
    """
    markup = InlineKeyboardMarkup()

    for key, value in menu.items():
        new_path = f"{path}/{key}" if path else key
        if isinstance(value, str):  # –≠—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (—Å—Å—ã–ª–∫–∞)
            if value.startswith("http://") or value.startswith("https://"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL
                markup.add(InlineKeyboardButton(key, url=value))
            else:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: {value}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        else:  # –≠—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞
            markup.add(InlineKeyboardButton(key, callback_data=f"menu_{new_path}"))

    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if path:
        parent_path = "/".join(path.split("/")[:-1])
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"menu_{parent_path}" if parent_path else "documentation"))
    markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root"))

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if message_id:
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup
        )
    else:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)